name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install Docker Compose and JQ
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose jq

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: private

      - name: Build Docker Image
        run: |
          docker-compose build

      - name: Tag Docker Image
        run: |
          docker tag deboraferrarids2/challenge_web:latest 778862303728.dkr.ecr.us-east-1.amazonaws.com/apieventos:latest

      - name: Push Docker Image to ECR
        run: |
          docker push 778862303728.dkr.ecr.us-east-1.amazonaws.com/apieventos:latest

      - name: Download Current Task Definition
        run: |
          aws ecs describe-task-definition --task-definition devtaskdeinition --query taskDefinition --output json > task-definition.json

      - name: Update Container Image in Task Definition
        id: update-image
        run: |
          NEW_IMAGE="778862303728.dkr.ecr.us-east-1.amazonaws.com/apieventos:latest"
          TASK_DEF_JSON=$(cat task-definition.json)

          FAMILY=$(echo "$TASK_DEF_JSON" | jq -r '.family')
          CONTAINER_DEFINITIONS=$(echo "$TASK_DEF_JSON" | jq --arg IMAGE "$NEW_IMAGE" '(.containerDefinitions | map(if .name == "devcontainer" then .image = $IMAGE | .memory = 512 | .memoryReservation = 256 else . end))')

          UPDATED_TASK_DEF_JSON=$(jq -n \
            --arg family "$FAMILY" \
            --argjson containerDefinitions "$CONTAINER_DEFINITIONS" \
            '{
              family: $family,
              containerDefinitions: $containerDefinitions
            }')

          NEW_TASK_DEFINITION=$(aws ecs register-task-definition --cli-input-json "$UPDATED_TASK_DEF_JSON")
          echo "task-definition-arn=$(echo $NEW_TASK_DEFINITION | jq -r '.taskDefinition.taskDefinitionArn')" >> $GITHUB_ENV


      - name: Deploy Updated Task Definition
        run: |
          aws ecs update-service --cluster events-cluster-ec2 --service events --force-new-deployment --task-definition "${{ env.task-definition-arn }}"

      - name: Run Migrations
        run: |
          aws ecs run-task --cluster events-cluster-ec2 --launch-type FARGATE --task-definition "${{ env.task-definition-arn }}" --overrides '{ "containerOverrides": [{ "name": "migration", "command": ["bash", "-c", "python manage.py makemigrations && python manage.py migrate"]}] } }'
